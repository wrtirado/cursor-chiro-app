# Task ID: 11
# Title: Notification Configuration API with HIPAA Compliance
# Status: pending
# Dependencies: 6
# Priority: medium
# Description: Implement API endpoints for configuring patient notification schedules with HIPAA-compliant data handling.
# Details:
Create endpoints for setting up notification schedules for therapy plans with RBAC controls. Implement time-based and event-based notification triggers. Develop configuration options for notification frequency and timing. Create endpoints for retrieving notification settings for the mobile app. Ensure notification content does not contain ePHI to comply with the Privacy Rule. Implement audit logging for all notification configuration changes. Use encryption for all notification data at rest and in transit. Ensure notification delivery mechanisms comply with HIPAA requirements. Adapt database models to use libSQL/SQLite data types and constraints. Use JSON1 extension for storing complex notification configuration data.

# Test Strategy:
Test creation of various notification schedules. Verify proper time calculations for different timezones. Test retrieval of notification settings by the mobile app. Validate that notification content does not expose ePHI. Verify RBAC controls prevent unauthorized access to notification configurations. Test audit logging for all notification operations. Ensure all API communications use proper encryption. Validate that notification delivery complies with HIPAA requirements. Test compatibility with libSQL/SQLite, particularly for JSON data storage and retrieval.

# Subtasks:
## 11.1. Create notification schedule endpoints [pending]
### Dependencies: None
### Description: Implement endpoints for creating and managing notification schedules using libSQL/SQLite for data storage
### Details:
**Database Migration Requirements:**
Before implementing this subtask, create a database migration for notification schedules:

1. **Create Migration File:**
   ```bash
   python migrate.py create add_notification_schedule_table
   ```

2. **Implement UP Script:**
   - Add CREATE TABLE statement for NotificationSchedule table:
     - `id` INTEGER PRIMARY KEY
     - `office_id` INTEGER NOT NULL (foreign key to offices table)
     - `schedule_name` TEXT NOT NULL
     - `schedule_type` TEXT NOT NULL (e.g., 'reminder', 'appointment', 'progress')
     - `frequency` TEXT NOT NULL (e.g., 'daily', 'weekly', 'monthly')
     - `time_of_day` TEXT (HH:MM format)
     - `days_of_week` TEXT (JSON array of day numbers)
     - `is_active` BOOLEAN DEFAULT TRUE
     - `template_message` TEXT NOT NULL (HIPAA-compliant template)
     - `created_at` DATETIME NOT NULL
     - `updated_at` DATETIME NOT NULL
   - Include FOREIGN KEY constraint to Office table
   - Add appropriate indexes for performance (office_id, schedule_type, is_active)

3. **Implement DOWN Script:**
   - Add `DROP TABLE IF EXISTS notification_schedule` statement

4. **Test Migration:**
   ```bash
   python migrate.py up
   python migrate.py down --step 1
   python migrate.py up
   ```

Follow SQLite type affinity guidelines and ensure the migration works in both directions. The template_message field should contain only HIPAA-compliant content without any ePHI.

## 11.2. Implement HIPAA-compliant notification content [pending]
### Dependencies: None
### Description: Ensure notification templates do not contain ePHI
### Details:
**Database Migration Requirements:**
No additional database migration is needed for this subtask as it utilizes the notification_schedule table created in subtask 11.1.

## 11.3. Add RBAC for notification configuration [pending]
### Dependencies: None
### Description: Implement role-based access controls for notification management
### Details:
**Database Migration Requirements:**
No additional database migration is needed for this subtask if using the existing RBAC system. If notification-specific permissions are required, update the permissions table using the existing migration pattern.

## 11.4. Implement audit logging [pending]
### Dependencies: None
### Description: Add detailed audit trails for all notification configuration operations using libSQL/SQLite
### Details:
**Database Migration Requirements:**
If this implementation requires a dedicated notification audit table (separate from general audit logs), follow these migration requirements:

1. **Create Migration File:**
   ```bash
   python migrate.py create add_notification_audit_table
   ```

2. **Implement UP Script:**
   - Add CREATE TABLE statement for NotificationAudit table:
     - `id` INTEGER PRIMARY KEY
     - `notification_schedule_id` INTEGER NOT NULL (foreign key to notification_schedule table)
     - `office_id` INTEGER NOT NULL (foreign key to offices table)
     - `action_type` TEXT NOT NULL (e.g., 'create', 'update', 'delete', 'activate', 'deactivate')
     - `changed_fields` TEXT (JSON of changed field names)
     - `old_values` TEXT (JSON of previous values, encrypted if needed)
     - `new_values` TEXT (JSON of new values, encrypted if needed)
     - `user_id` INTEGER (foreign key to users table)
     - `timestamp` DATETIME NOT NULL
     - `compliance_notes` TEXT (any HIPAA compliance notes)
   - Include FOREIGN KEY constraints to notification_schedule, offices, and users tables
   - Add appropriate indexes for performance (notification_schedule_id, office_id, timestamp, action_type)

3. **Implement DOWN Script:**
   - Add `DROP TABLE IF EXISTS notification_audit` statement

4. **Test Migration:**
   ```bash
   python migrate.py up
   python migrate.py down --step 1
   python migrate.py up
   ```

**Alternative:** If using the existing general audit system, no additional migration is needed.

Follow SQLite type affinity guidelines and ensure the migration works in both directions.

## 11.5. Add data encryption [pending]
### Dependencies: None
### Description: Implement encryption for notification data at rest and in transit, adapting methods for libSQL/SQLite
### Details:
**Database Migration Requirements:**
No additional database migration is needed for this subtask as it involves implementing encryption on existing tables. If encryption requires schema changes, create a migration following the established pattern.

## 11.6. Verify HIPAA compliance for delivery mechanisms [pending]
### Dependencies: None
### Description: Ensure notification delivery methods comply with HIPAA requirements
### Details:
**Database Migration Requirements:**
If this implementation requires a notification delivery tracking table, follow these migration requirements:

1. **Create Migration File:**
   ```bash
   python migrate.py create add_notification_delivery_table
   ```

2. **Implement UP Script:**
   - Add CREATE TABLE statement for NotificationDelivery table:
     - `id` INTEGER PRIMARY KEY
     - `notification_schedule_id` INTEGER NOT NULL (foreign key to notification_schedule table)
     - `recipient_id` INTEGER NOT NULL (foreign key to users or patients table)
     - `delivery_status` TEXT NOT NULL (e.g., 'pending', 'sent', 'delivered', 'failed')
     - `delivery_method` TEXT NOT NULL (e.g., 'sms', 'email', 'app')
     - `sent_at` DATETIME
     - `delivered_at` DATETIME
     - `error_message` TEXT
     - `compliance_verified` BOOLEAN DEFAULT FALSE
     - `created_at` DATETIME NOT NULL
     - `updated_at` DATETIME NOT NULL
   - Include FOREIGN KEY constraints to notification_schedule table
   - Add appropriate indexes for performance (notification_schedule_id, recipient_id, delivery_status)

3. **Implement DOWN Script:**
   - Add `DROP TABLE IF EXISTS notification_delivery` statement

4. **Test Migration:**
   ```bash
   python migrate.py up
   python migrate.py down --step 1
   python migrate.py up
   ```

Follow SQLite type affinity guidelines and ensure the migration works in both directions.

