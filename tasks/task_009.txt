# Task ID: 9
# Title: Payment Processing API with HIPAA Compliance
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Integrate payment processing for the SaaS provider to bill individual Offices for software usage. This involves managing subscription status and payment provider details at the Office level, and integrating with a payment gateway. Your SaaS payment provider API keys will be stored in .env, not the database. All billing and payment logic should align with the canonical specification in docs/payment-plan.md.
# Details:
Integrate with a payment gateway (e.g., Stripe) for processing subscription payments at the Office level, following the specifications in docs/payment-plan.md. Store subscription status and billing information in the Office table while keeping payment provider API keys in .env files for security. Create endpoints for subscription management and payment processing with appropriate RBAC controls. Implement billing records and invoice generation with minimal ePHI inclusion. Set up webhook handlers for payment events with audit logging. Ensure all payment data transmission uses TLS 1.2+ encryption. Implement detailed audit trails for all payment transactions. Develop functionality to track subscription status, billing cycles, and payment history for each Office, adhering to the payment plan structure defined in the documentation.

# Test Strategy:
Test subscription billing with test credentials, ensuring alignment with docs/payment-plan.md specifications. Verify proper recording of subscription status and billing information at the Office level. Test subscription creation, updates, and cancellations. Ensure proper error handling for failed payments. Validate that payment configurations are correctly loaded from environment variables. Verify audit logs are created for all payment actions. Test RBAC to ensure only authorized users can access payment information. Validate that all API communications use proper encryption. Test webhook handling for payment events from the payment gateway.

# Subtasks:
## 1. Revert `payment_config` from `Company` Model & Clean Alembic [done]
### Dependencies: None
### Description: Remove the `payment_config` JSON column from the `Company` model in `api/models/base.py`. Create a new Alembic migration to reflect this removal or ensure the previous migration that added it is cleanly reversed/removed if no other changes depend on it.
### Details:


## 2. Define and Add Subscription Fields to `Office` Model [done]
### Dependencies: None
### Description: Define necessary fields for office-level subscriptions (e.g., `subscription_status`, `payment_provider_customer_id`, `payment_provider_subscription_id`, `current_plan_id`, `billing_cycle_anchor_date`). Add these fields to the `Office` model in `api/models/base.py`. Ensure all fields align with the payment plan structure defined in docs/payment-plan.md.
### Details:


## 3. Generate Alembic Migration for `Office` Subscription Fields [pending]
### Dependencies: None
### Description: After adding subscription-related fields to the `Office` model, generate a new Alembic migration script to apply these changes to the database schema.
### Details:


<info added on 2025-05-20T03:49:09.977Z>
The Alembic migrations are currently paused for local development due to libSQL/driver instability. Schema changes for the Office model (from subtask 9.2) are being handled by SQLAlchemy's `create_all()` method during application startup. 

When Alembic is re-enabled, we'll need to:
1. Run `alembic revision --autogenerate -m "Add subscription fields to Office model"` to generate the migration script
2. Review the generated script to ensure it correctly captures all field additions
3. Test the migration on a staging database before applying to production
4. Document the migration in our schema change log

This subtask will be revisited when Alembic is re-enabled. In the meantime, ensure all schema changes are properly documented for future migration creation.
</info added on 2025-05-20T03:49:09.977Z>

## 4. HIPAA-Compliant Audit Logging for Billing Events [done]
### Dependencies: None
### Description: Implement detailed audit trails for all office-level subscription and billing-related operations (e.g., subscription creation, status changes, payment attempts) using libSQL/SQLite.
### Details:


## 5. Verify BAA with Chosen SaaS Payment Processor [pending]
### Dependencies: None
### Description: Ensure a Business Associate Agreement (BAA) is in place with the payment gateway provider selected for handling the SaaS subscription billing for offices.
### Details:


## 6. Secure Storage and Transmission of Payment Provider References [pending]
### Dependencies: None
### Description: Ensure any stored references to payment provider entities (e.g., customer IDs for offices, subscription IDs) are handled securely within the database. All data transmission related to billing (e.g., to/from payment gateway) must use TLS 1.2+.
### Details:


## 7. Data Minimization for SaaS Invoices to Offices [pending]
### Dependencies: None
### Description: Implement practices to limit unnecessary data exposure in invoices generated by the SaaS for its customers (Offices), aligning with privacy principles.
### Details:


## 8. Review and Implement Payment Plan Documentation [pending]
### Dependencies: None
### Description: Thoroughly review docs/payment-plan.md to ensure all implementation details for billing and payment processing align with the canonical specification. Update implementation plans as needed to match the documented requirements.
### Details:
This includes reviewing payment tiers, billing cycles, upgrade/downgrade logic, trial periods, and any other payment-related specifications in the documentation.

## 9. Align Billing API and Data Models with payment-plan.md [pending]
### Dependencies: None
### Description: Review docs/payment-plan.md and ensure all billing API endpoints, data models, and business logic are consistent with the specifications in this document. Update or add additional fields, endpoints, or logic as needed to fully implement the payment and billing structure described.
### Details:


## 10. Design and Implement Invoice Table [pending]
### Dependencies: None
### Description: Create a table to store monthly and one-off invoices for each office, including billing period, total, status, and references to line items, as described in docs/payment-plan.md.
### Details:


## 11. Design and Implement Invoice Line Item Table [pending]
### Dependencies: None
### Description: Create a table to store detailed line items for each invoice (e.g., patient activations, setup fees), as specified in docs/payment-plan.md.
### Details:


## 12. Update Patient/User Model for Billing Status [pending]
### Dependencies: None
### Description: Add fields to the patient/user model to track activation/deactivation dates and billing status for each billing cycle, supporting the per-patient billing logic in docs/payment-plan.md.
### Details:


## 13. Implement Patient Activation Billing Logic [pending]
### Dependencies: None
### Description: Ensure that activating a patient account adds a line item to the current invoice for the office. Handle reactivation and deactivation logic as described in docs/payment-plan.md.
### Details:


## 14. Implement Monthly Invoice Generation Logic [pending]
### Dependencies: None
### Description: At the start of each billing cycle, generate invoices for all offices, including all active patients and any reactivations. Ensure deactivated accounts are not billed in future cycles unless reactivated, per docs/payment-plan.md.
### Details:


## 15. Implement One-Off Invoice/Charge Logic (e.g., Setup Fee) [pending]
### Dependencies: None
### Description: Allow creation of one-off invoices/charges for offices (e.g., onboarding/setup fee) outside the regular billing cycle, as described in docs/payment-plan.md.
### Details:


## 16. Integrate with Payment Provider for Invoicing and Payments [pending]
### Dependencies: None
### Description: Ensure each office has a customer record in the payment provider. Generate and send invoices via the payment provider, and track payment status and update invoice records accordingly, as described in docs/payment-plan.md.
### Details:


## 17. Implement API Endpoints for Invoice Retrieval and Payment Status [pending]
### Dependencies: None
### Description: Create endpoints for offices to view their invoices, line items, and payment status, as described in docs/payment-plan.md.
### Details:


## 18. Implement Audit Logging for All Billing Events [pending]
### Dependencies: None
### Description: Log all billing-related actions (invoice creation, payment, patient activation, etc.) for compliance, as described in docs/payment-plan.md and developer-compliance-guide.md.
### Details:


## 19. Implement Data Minimization and Security for Billing Data [pending]
### Dependencies: None
### Description: Ensure only necessary billing data is exposed via the API and that all sensitive data is handled securely, as described in docs/payment-plan.md and developer-compliance-guide.md.
### Details:


## 20. Write Tests for Billing Logic and API Endpoints [pending]
### Dependencies: None
### Description: Add unit and integration tests to verify correct billing, invoice generation, and payment processing, as described in docs/payment-plan.md.
### Details:


## 21. Document Billing API and Data Model [pending]
### Dependencies: None
### Description: Update or create documentation for the billing API, data models, and business logic, referencing docs/payment-plan.md.
### Details:


