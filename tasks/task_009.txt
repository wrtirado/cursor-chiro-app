# Task ID: 9
# Title: Payment Processing API with HIPAA Compliance
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Integrate payment processing for the SaaS provider to bill individual Offices for software usage. This involves managing subscription status and payment provider details at the Office level, and integrating with Stripe without a BAA. All billing must be office-level only with NO patient information sent to Stripe. Your SaaS payment provider API keys will be stored in .env, not the database. All billing and payment logic should align with the canonical specification in docs/payment-plan.md.
# Details:
Integrate with Stripe for processing subscription payments at the Office level, following the specifications in docs/payment-plan.md. Implement complete ePHI isolation to ensure no patient information is ever transmitted to Stripe, as we will operate without a Business Associate Agreement (BAA). Store subscription status and billing information in the Office table while keeping payment provider API keys in .env files for security. Create endpoints for subscription management and payment processing with appropriate RBAC controls. Implement billing records and invoice generation with strict data minimization that completely excludes ePHI. Set up webhook handlers for payment events with audit logging. Ensure all payment data transmission uses TLS 1.2+ encryption. Implement detailed audit trails for all payment transactions. Develop functionality to track subscription status, billing cycles, and payment history for each Office, adhering to the payment plan structure defined in the documentation. Design a two-tier data architecture that maintains internal ePHI tracking while generating anonymous aggregate billing entries for external payment processing.

# Test Strategy:
Test subscription billing with test credentials, ensuring alignment with docs/payment-plan.md specifications. Verify proper recording of subscription status and billing information at the Office level. Test subscription creation, updates, and cancellations. Ensure proper error handling for failed payments. Validate that payment configurations are correctly loaded from environment variables. Verify audit logs are created for all payment actions. Test RBAC to ensure only authorized users can access payment information. Validate that all API communications use proper encryption. Test webhook handling for payment events from the payment gateway. Implement specific tests to verify complete ePHI isolation in all payment transactions, confirming that no patient information is transmitted to Stripe under any circumstances. Test data sanitization layers to ensure they properly strip all ePHI before data reaches the payment processor.

# Subtasks:
## 1. Revert `payment_config` from `Company` Model & Clean Alembic [done]
### Dependencies: None
### Description: Remove the `payment_config` JSON column from the `Company` model in `api/models/base.py`. Create a new Alembic migration to reflect this removal or ensure the previous migration that added it is cleanly reversed/removed if no other changes depend on it.
### Details:


## 2. Define and Add Subscription Fields to `Office` Model [done]
### Dependencies: None
### Description: Define necessary fields for office-level subscriptions (e.g., `subscription_status`, `payment_provider_customer_id`, `payment_provider_subscription_id`, `current_plan_id`, `billing_cycle_anchor_date`). Add these fields to the `Office` model in `api/models/base.py`. Ensure all fields align with the payment plan structure defined in docs/payment-plan.md.
### Details:


## 3. Generate Alembic Migration for `Office` Subscription Fields [done]
### Dependencies: None
### Description: After adding subscription-related fields to the `Office` model, generate a new Alembic migration script to apply these changes to the database schema.
### Details:


<info added on 2025-05-20T03:49:09.977Z>
The Alembic migrations are currently paused for local development due to libSQL/driver instability. Schema changes for the Office model (from subtask 9.2) are being handled by SQLAlchemy's `create_all()` method during application startup. 

When Alembic is re-enabled, we'll need to:
1. Run `alembic revision --autogenerate -m "Add subscription fields to Office model"` to generate the migration script
2. Review the generated script to ensure it correctly captures all field additions
3. Test the migration on a staging database before applying to production
4. Document the migration in our schema change log

This subtask will be revisited when Alembic is re-enabled. In the meantime, ensure all schema changes are properly documented for future migration creation.
</info added on 2025-05-20T03:49:09.977Z>
<info added on 2025-05-20T19:56:24.570Z>
The migration process is now handled by our custom migration tool for libSQL (developed in Task #33) instead of Alembic. Schema changes for the Office model (from subtask 9.2) will need to be properly migrated using this new approach.

When implementing the subscription fields migration:
1. Create a new migration file using `libsql-migrate create "Add subscription fields to Office model"`
2. Define both the up and down migration functions in the generated file
3. Test the migration on a local database instance
4. Apply to staging using `libsql-migrate apply --env=staging`
5. After verification, apply to production with `libsql-migrate apply --env=production`
6. Update the schema change log with details of the migration

This custom migration tool addresses the previous libSQL/driver instability issues while providing reliable schema versioning.
</info added on 2025-05-20T19:56:24.570Z>

## 4. HIPAA-Compliant Audit Logging for Billing Events [done]
### Dependencies: None
### Description: Implement detailed audit trails for all office-level subscription and billing-related operations (e.g., subscription creation, status changes, payment attempts) using libSQL/SQLite.
### Details:


## 5. Verify BAA with Chosen SaaS Payment Processor [done]
### Dependencies: None
### Description: Ensure a Business Associate Agreement (BAA) is in place with the payment gateway provider selected for handling the SaaS subscription billing for offices.
### Details:
<info added on 2025-05-23T01:39:21.632Z>
# Payment Processor Selection and BAA Status

## Selection Decision
- Stripe has been selected as the payment processor after codebase analysis
- Stripe offers Business Associate Agreement (BAA) for healthcare customers

## Documentation
- Comprehensive BAA requirements documentation created at docs/payment-processor-baa-requirements.md

## BAA Process Status
- BAA execution is pending business action

## Next Steps
1. Contact Stripe healthcare compliance team to initiate BAA process
2. Legal review of BAA terms
3. Execute signed agreement
4. Document BAA in compliance records
</info added on 2025-05-23T01:39:21.632Z>
<info added on 2025-05-24T22:06:38.662Z>
# Payment Processor Strategy Update

## Revised Approach
- Stripe will be used as the payment processor, but WITHOUT a Business Associate Agreement (BAA)
- Stripe does not offer BAAs due to their data sharing practices with non-HIPAA compliant third parties

## Compliance Requirements
- NO ePHI can be transmitted to Stripe under any circumstances
- All payments and invoices must contain office/practice information ONLY
- Patient information must be completely omitted from all Stripe transactions

## Implementation Guidelines
- Create data filtering layer to ensure ePHI is stripped before payment processing
- Implement unique reference IDs that contain no patient identifiers
- Develop internal mapping system to associate payments with patients within our HIPAA-compliant environment

## Documentation Updates
- Update docs/payment-processor-baa-requirements.md to reflect new no-ePHI approach
- Create technical specification for ePHI filtering implementation
- Document compliance rationale for operating without a BAA

## Next Steps
1. Design data filtering architecture for payment processing
2. Update payment workflows to ensure ePHI isolation
3. Implement additional audit logging for payment-to-patient mapping
4. Review approach with compliance officer
</info added on 2025-05-24T22:06:38.662Z>
<info added on 2025-05-24T22:06:48.378Z>
# Document Stripe Payment Strategy Without BAA

Document the approach for using Stripe payment processing without a BAA, ensuring complete ePHI isolation from payment transactions. All payments must contain office information only.
</info added on 2025-05-24T22:06:48.378Z>

## 6. Secure Storage and Transmission of Payment Provider References [done]
### Dependencies: None
### Description: Ensure any stored references to payment provider entities (e.g., customer IDs for offices, subscription IDs) are handled securely within the database. All data transmission related to billing (e.g., to/from payment gateway) must use TLS 1.2+.
### Details:


## 7. Data Minimization for SaaS Invoices to Offices [done]
### Dependencies: None
### Description: Implement practices to limit unnecessary data exposure in invoices generated by the SaaS for its customers (Offices), aligning with privacy principles.
### Details:
<info added on 2025-05-24T22:06:59.656Z>
The payment processing system must implement strict data minimization to ensure NO ePHI is transmitted to Stripe under any circumstances. All invoices and payment records sent to Stripe must contain only office-level information and aggregated billing data, with complete removal of patient identifiers and any other ePHI. This isolation is mandatory since no Business Associate Agreement (BAA) will be established with Stripe. The system should implement data filtering and sanitization layers before any information reaches the payment processor, maintaining a clear boundary between clinical/patient data and financial transaction data. Regular audits should verify this separation is maintained throughout all payment workflows.
</info added on 2025-05-24T22:06:59.656Z>

## 8. Review and Implement Payment Plan Documentation [done]
### Dependencies: None
### Description: Thoroughly review docs/payment-plan.md to ensure all implementation details for billing and payment processing align with the canonical specification. Update implementation plans as needed to match the documented requirements.
### Details:
This includes reviewing payment tiers, billing cycles, upgrade/downgrade logic, trial periods, and any other payment-related specifications in the documentation.
<info added on 2025-05-24T22:34:55.154Z>
Completed comprehensive review of docs/payment-plan.md and analysis of current implementation. Created detailed implementation analysis document at docs/payment-plan-implementation-analysis.md that identifies:

✅ **Well-Aligned Components**:
- Office model subscription fields properly implemented 
- Strong security infrastructure with payment reference encryption, TLS enforcement, and Stripe ID validation
- Comprehensive data minimization system for ePHI isolation from Stripe
- Solid audit logging foundation

❌ **Critical Gaps Identified**:
- Missing core billing models (Invoice, Invoice Line Items tables)
- No business logic for patient activation billing, monthly invoice generation, or one-off charges
- Missing API endpoints for billing operations
- Stripe integration infrastructure exists but no actual API integration implemented

📋 **5-Phase Implementation Roadmap Created**:
1. Database Schema Completion (Tasks 9.10-9.12)
2. Core Business Logic (Tasks 9.13-9.15) 
3. Stripe Integration (Tasks 9.16-9.17)
4. Compliance & Security Integration (Tasks 9.18-9.19)
5. Testing & Documentation (Tasks 9.20-9.21)

🔍 **Key Findings**:
- Current implementation has excellent foundation for ePHI isolation but lacks core billing functionality
- Payment plan requirements are well-understood and documented
- Clear path forward identified with appropriate risk mitigation strategies
- All subsequent tasks properly aligned with payment plan specifications

The analysis provides the foundation needed for Task 9.9 to begin aligning the remaining implementation components.
</info added on 2025-05-24T22:34:55.154Z>

## 9. Align Billing API and Data Models with payment-plan.md [pending]
### Dependencies: None
### Description: Review docs/payment-plan.md and ensure all billing API endpoints, data models, and business logic are consistent with the specifications in this document. Update or add additional fields, endpoints, or logic as needed to fully implement the payment and billing structure described.
### Details:


## 10. Design and Implement Invoice Table [pending]
### Dependencies: None
### Description: Create a table to store monthly and one-off invoices for each office, including billing period, total, status, and references to line items, as described in docs/payment-plan.md.
### Details:


## 11. Design and Implement Invoice Line Item Table [pending]
### Dependencies: None
### Description: Create a table to store detailed line items for each invoice (e.g., patient activations, setup fees), as specified in docs/payment-plan.md.
### Details:
<info added on 2025-05-24T22:07:11.624Z>
The Invoice Line Item Table design must implement a strict separation between patient information and billing data sent to Stripe. Design requirements:

1. Use anonymous identifiers for all line items (no patient names, IDs, or other identifiers)
2. Implement aggregate data representation (e.g., "Patient Activations: 3 @ $5.00 each") rather than individual patient entries
3. Create a dual-purpose schema that maintains internal ePHI tracking capabilities while generating sanitized data for external payment processing
4. Establish a one-way relationship where internal systems can trace payments to patients, but external systems cannot trace payments back to specific individuals
5. Include data sanitization functions that strip all PHI before transmitting to Stripe
6. Document the data flow to demonstrate HIPAA compliance in the separation of billing data from patient information
</info added on 2025-05-24T22:07:11.624Z>

## 12. Update Patient/User Model for Billing Status [pending]
### Dependencies: None
### Description: Add fields to the patient/user model to track activation/deactivation dates and billing status for each billing cycle, supporting the per-patient billing logic in docs/payment-plan.md.
### Details:


## 13. Implement Patient Activation Billing Logic [pending]
### Dependencies: None
### Description: Ensure that activating a patient account adds a line item to the current invoice for the office. Handle reactivation and deactivation logic as described in docs/payment-plan.md.
### Details:
<info added on 2025-05-24T22:07:22.887Z>
Implement billing logic that maintains strict ePHI separation by creating a two-tier data architecture. Design an internal tracking system that records patient activations with full ePHI data while generating anonymous aggregate billing entries for Stripe integration. Develop a mapping system to count activations per medical office without exposing individual patient identities. Create comprehensive internal audit trails that document all billing-related activities while ensuring only sanitized summary data is transmitted to external payment processors. Implement data validation to verify that no ePHI is included in outbound payment processing requests. Add unit tests to confirm proper data separation and HIPAA compliance throughout the billing workflow.
</info added on 2025-05-24T22:07:22.887Z>

## 14. Implement Monthly Invoice Generation Logic [pending]
### Dependencies: None
### Description: At the start of each billing cycle, generate invoices for all offices, including all active patients and any reactivations. Ensure deactivated accounts are not billed in future cycles unless reactivated, per docs/payment-plan.md.
### Details:


## 15. Implement One-Off Invoice/Charge Logic (e.g., Setup Fee) [pending]
### Dependencies: None
### Description: Allow creation of one-off invoices/charges for offices (e.g., onboarding/setup fee) outside the regular billing cycle, as described in docs/payment-plan.md.
### Details:


## 16. Integrate with Payment Provider for Invoicing and Payments [pending]
### Dependencies: None
### Description: Ensure each office has a customer record in the payment provider. Generate and send invoices via the payment provider, and track payment status and update invoice records accordingly, as described in docs/payment-plan.md.
### Details:
<info added on 2025-05-24T22:07:36.406Z>
Implement one-off charge functionality for setup fees and other non-recurring charges using the no-BAA Stripe approach. Create data sanitization layers that strip all ePHI before data reaches Stripe. Design the system to generate office-level invoices with aggregated billing data only, removing all patient identifiers. Develop data filtering functions that prevent transmission of patient details when processing one-time charges. Implement anonymous reference ID system for tracking one-off payments that cannot be traced back to individual patients. Establish audit trails to verify and document that ePHI isolation is maintained throughout the one-off charge process. Ensure all setup fees and special charges follow the same ePHI protection standards as recurring payments.
</info added on 2025-05-24T22:07:36.406Z>

## 17. Implement API Endpoints for Invoice Retrieval and Payment Status [pending]
### Dependencies: None
### Description: Create endpoints for offices to view their invoices, line items, and payment status, as described in docs/payment-plan.md.
### Details:


## 18. Implement Audit Logging for All Billing Events [pending]
### Dependencies: None
### Description: Log all billing-related actions (invoice creation, payment, patient activation, etc.) for compliance, as described in docs/payment-plan.md and developer-compliance-guide.md.
### Details:


## 19. Implement Data Minimization and Security for Billing Data [pending]
### Dependencies: None
### Description: Ensure only necessary billing data is exposed via the API and that all sensitive data is handled securely, as described in docs/payment-plan.md and developer-compliance-guide.md.
### Details:
<info added on 2025-05-24T22:07:48.897Z>
Implement strict ePHI isolation from Stripe payment processing through comprehensive data minimization techniques. Design and build API security layers that filter, validate, and sanitize all outbound data to ensure zero ePHI transmission to Stripe. Create a clear boundary between internal patient data systems and external payment processing by implementing tokenization and data transformation services. Develop real-time monitoring and alerting systems to detect any potential ePHI exposure in payment workflows. Document the technical controls that maintain this isolation, as this represents our primary security control in the absence of a BAA with Stripe. Include validation checkpoints in the data flow to verify no PHI crosses the boundary during payment operations.
</info added on 2025-05-24T22:07:48.897Z>

## 20. Write Tests for Billing Logic and API Endpoints [pending]
### Dependencies: None
### Description: Add unit and integration tests to verify correct billing, invoice generation, and payment processing, as described in docs/payment-plan.md.
### Details:


## 21. Document Billing API and Data Model [pending]
### Dependencies: None
### Description: Update or create documentation for the billing API, data models, and business logic, referencing docs/payment-plan.md.
### Details:


## 22. Implement ePHI Isolation Layer for Payment Processing [pending]
### Dependencies: None
### Description: Design and implement a data filtering layer that ensures complete isolation of ePHI from all payment transactions sent to Stripe, since we will operate without a BAA.
### Details:
Create a comprehensive data sanitization system that strips all patient identifiers and other ePHI before any data is transmitted to Stripe. Implement validation checks to verify no ePHI is included in outbound payment requests. Design a system for aggregating patient-related billing data at the office level without exposing individual patient information. Document the technical architecture that maintains this strict separation between internal patient data and external payment processing.

## 23. Create Anonymous Reference System for Patient Billing [pending]
### Dependencies: None
### Description: Develop a system that allows internal tracking of patient-related billing while presenting only anonymized aggregate data to Stripe.
### Details:
Implement a one-way mapping system where internal systems can trace payments to specific patients, but external systems cannot trace payments back to individuals. Create unique reference IDs for billing items that contain no patient identifiers. Design the database schema to support this dual-purpose functionality while maintaining HIPAA compliance. Document the data flow to demonstrate how patient privacy is protected throughout the billing process.

## 24. Document No-BAA Stripe Integration Approach [pending]
### Dependencies: None
### Description: Create comprehensive documentation explaining the technical implementation of Stripe integration without a BAA, focusing on ePHI isolation methods.
### Details:
Update docs/payment-processor-baa-requirements.md to reflect the no-BAA approach with Stripe. Create technical specifications for the ePHI filtering implementation. Document the compliance rationale for operating without a BAA. Include detailed explanations of data flows, sanitization processes, and validation checks that ensure no ePHI is transmitted to Stripe. Provide guidelines for developers on maintaining this separation when making future changes to the payment system.

