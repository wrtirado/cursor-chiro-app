# Task ID: 34
# Title: Transition to Many-to-Many User Role System with HIPAA Compliance
# Status: pending
# Dependencies: 4, 33
# Priority: high
# Description: Refactor the user role architecture to support multiple roles per user using a many-to-many relationship, updating all backend, API, and audit logic to maintain HIPAA compliance and system stability.
# Details:
1. Analyze the current user-role schema, identifying all locations where the single 'role_id' foreign key is referenced in models, queries, and business logic.
2. Design and implement a new 'user_roles' junction table with user_id and role_id as foreign keys, establishing a many-to-many relationship between users and roles in the database. Update the SQLAlchemy models to reflect this association using the 'secondary' parameter in relationship definitions, ensuring bidirectional access (users.roles, roles.users) and compatibility with libSQL/SQLite. 
3. Refactor the RBAC logic, including the 'require_role()' function, to check for membership in a user's set of roles rather than a single role match. Update all API endpoints and business logic that perform role checks to use the new logic.
4. Update user creation and update schemas/DTOs to support assigning multiple roles, and modify the frontend role selection UI to allow multi-select and display of multiple roles per user.
5. Develop and execute a migration plan using the custom migration tool (Task 33) to create the new table, migrate existing data (mapping each user's current role_id to a user_roles entry), and remove the obsolete role_id column from the users table.
6. Ensure all role changes and assignments are audit logged in accordance with HIPAA, preserving access controls and data minimization. Review and update documentation to reflect the new role system and compliance considerations.

# Test Strategy:
- Write and run migration tests to verify correct creation of the user_roles table, accurate data migration, and removal of the old role_id column.
- Implement unit and integration tests for the updated RBAC logic, ensuring users with multiple roles are correctly authorized and denied access as appropriate.
- Test all user management endpoints for correct handling of multiple roles, including creation, update, and retrieval.
- Validate that audit logs are generated for all role assignment and change events, and that no unauthorized access is possible under the new system.
- Conduct regression testing on all endpoints and UI components affected by the role system change to ensure system stability and HIPAA compliance.

# Subtasks:
## 1. Audit Current User-Role Schema and References [pending]
### Dependencies: None
### Description: Identify all locations in the codebase, database schema, and business logic where the single 'role_id' foreign key is referenced, including models, queries, API endpoints, and RBAC logic.
### Details:
Perform a comprehensive search for 'role_id' usage in models, controllers, services, and database migrations to map all dependencies.

## 2. Design Many-to-Many User-Role Schema [pending]
### Dependencies: 34.1
### Description: Design a new 'user_roles' junction table with 'user_id' and 'role_id' as foreign keys to establish a many-to-many relationship between users and roles.
### Details:
Ensure the schema supports bidirectional access and is compatible with libSQL/SQLite. Define appropriate indexes and constraints for performance and data integrity.

## 3. Update ORM Models for Many-to-Many Association [pending]
### Dependencies: 34.2
### Description: Refactor SQLAlchemy models to use the new 'user_roles' association table, updating relationship definitions with the 'secondary' parameter for bidirectional access.
### Details:
Modify User and Role models to reflect the new association, ensuring compatibility with existing queries and business logic.

## 4. Refactor RBAC Logic and Role Checks [pending]
### Dependencies: 34.3
### Description: Update all role-based access control logic, including the 'require_role()' function and related middleware, to check for membership in a user's set of roles instead of a single role.
### Details:
Ensure all API endpoints and business logic that perform role checks are updated to use the new logic.

## 5. Modify API Schemas and DTOs for Multi-Role Support [pending]
### Dependencies: 34.3
### Description: Update user creation and update schemas/DTOs to support assigning and displaying multiple roles per user.
### Details:
Adjust API request/response models to accept and return arrays of role IDs. Ensure backward compatibility where possible.

## 6. Update Frontend Role Management UI [pending]
### Dependencies: 34.5
### Description: Modify the frontend user management interface to allow multi-select role assignment and display multiple roles per user.
### Details:
Implement UI components for selecting and displaying multiple roles, ensuring usability and accessibility.

## 7. Develop Migration Scripts for Data Transition [pending]
### Dependencies: 34.2
### Description: Create migration scripts using the custom migration tool to create the 'user_roles' table, migrate existing role assignments, and remove the obsolete 'role_id' column from the users table.
### Details:
Map each user's current 'role_id' to a corresponding entry in 'user_roles'. Ensure data integrity and rollback capability.

## 8. Update and Validate Audit Logging for HIPAA Compliance [pending]
### Dependencies: 34.4, 34.7
### Description: Ensure all role changes and assignments are audit logged in accordance with HIPAA, preserving access controls and data minimization.
### Details:
Review and update audit logging mechanisms to capture multi-role assignments, changes, and removals with appropriate metadata.

## 9. Comprehensive Testing of Role System Functionality [pending]
### Dependencies: 34.4, 34.6, 34.7
### Description: Develop and execute unit, integration, and regression tests to validate the new many-to-many role system across backend, API, and frontend layers.
### Details:
Test scenarios including multi-role assignment, access control enforcement, data migration, and UI interactions.

## 10. Performance and Security Review [pending]
### Dependencies: None
### Description: Conduct a performance and security review of the updated role system, focusing on query efficiency, data access patterns, and HIPAA compliance.
### Details:
Profile database queries, review access control logic, and perform security audits to identify and remediate potential vulnerabilities.

## 11. Update System Documentation and Compliance Records [pending]
### Dependencies: 34.8, 34.10
### Description: Revise technical documentation, user guides, and compliance records to reflect the new many-to-many role system and HIPAA considerations.
### Details:
Document schema changes, API updates, migration steps, and audit logging procedures. Update compliance checklists as needed.

## 12. Production Deployment and Post-Deployment Monitoring [pending]
### Dependencies: None
### Description: Deploy the updated system to production, monitor for issues, and validate that all role assignments, access controls, and audit logs function as intended.
### Details:
Establish monitoring and alerting for role-related errors or access violations. Provide support for rollback if critical issues are detected.

