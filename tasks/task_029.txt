# Task ID: 29
# Title: Overhaul Alembic Migrations for libSQL/SQLite Compatibility
# Status: pending
# Dependencies: 28, 33
# Priority: high
# Description: Reset the migration history by removing all existing migration files and generating a single initial migration that reflects the libSQL-compatible database models using the new custom migration tool.
# Details:
Following Option B from section 4 of `docs/switching-db-to-libsql.md`, this task involves:

1. Back up the existing migration files in `alembic/versions/` directory to a separate location (for reference purposes)
2. Delete all migration script files from the `alembic/versions/` directory
3. Ensure all SQLAlchemy models have been properly adapted for libSQL/SQLite compatibility (dependent on Task 28)
4. Generate a new initial migration using the custom migration tool (developed in Task 33)
5. Review the generated migration file to ensure it correctly captures all model definitions
6. Update any documentation that references specific migration versions
7. Configure the custom migration tool for proper libSQL integration
8. Test the migration by applying it to a fresh database

Note: This approach will erase the previous migration history, meaning that existing databases cannot be upgraded using the standard upgrade path. A separate data migration strategy may be needed for production environments.

# Test Strategy:
1. Create a fresh libSQL/SQLite database
2. Run the custom migration tool to apply the new initial migration
3. Verify that all tables, columns, indexes, and constraints are created correctly by:
   - Inspecting the database schema using SQLite tools or commands
   - Comparing the actual schema with the expected schema based on the models
   - Ensuring all model classes can be instantiated and saved to the database
4. Test rollback functionality with the custom migration tool
5. Verify the application can connect to and operate with the new database schema by:
   - Running a subset of existing integration tests against the new schema
   - Performing CRUD operations on all major entities
   - Testing any complex queries that might be affected by SQLite's limitations
6. Document any schema differences between the previous PostgreSQL schema and the new SQLite schema

# Subtasks:
## 1. Back up and clean existing Alembic migration files [done]
### Dependencies: None
### Description: Create a backup of all existing migration files in the alembic/versions/ directory and then remove them from the active project directory.
### Details:
Implementation steps:
1. Create a backup directory outside the project structure (e.g., 'alembic_backup/')
2. Copy all files from 'alembic/versions/' to the backup directory with their original filenames and timestamps preserved
3. Document the backup location in a README file within the backup directory
4. Remove all migration script files from the 'alembic/versions/' directory
5. Verify the directory is empty except for any necessary __init__.py file

Testing approach:
- Confirm all files were properly backed up by comparing file counts and checksums
- Verify the alembic/versions/ directory is properly cleaned

## 2. Update Alembic environment configuration for libSQL [done]
### Dependencies: 29.1
### Description: Modify the Alembic environment configuration in env.py to ensure proper compatibility with libSQL/SQLite.
### Details:
Implementation steps:
1. Review the current env.py file in the Alembic directory
2. Update the database URL handling to properly connect to libSQL/SQLite
3. Modify any SQLAlchemy configuration options that need adjustment for libSQL compatibility
4. Ensure proper handling of SQLite-specific constraints and types
5. Add comments explaining the libSQL-specific configurations
6. Update any render_item or include_object functions to handle SQLite-specific schema elements

Testing approach:
- Run a basic Alembic command like 'alembic current' to verify the configuration works
- Check logs for any SQLite-specific warnings or errors

## 3. Generate new initial migration for libSQL schema [done]
### Dependencies: 29.1, 29.2
### Description: Create a new initial migration that captures the complete database schema compatible with libSQL/SQLite.
### Details:
Implementation steps:
1. Ensure all SQLAlchemy models have been properly adapted for libSQL/SQLite compatibility
2. Run the command: `alembic revision --autogenerate -m "Initial schema for SQLite/libSQL"`
3. Capture the new migration version ID for documentation
4. Verify the migration file was created in the alembic/versions/ directory
5. Check that the migration includes all expected tables, indices, and constraints

Testing approach:
- Review the generated migration file to ensure it correctly captures all model definitions
- Verify no SQLite-incompatible operations are included
- Check for any unexpected schema differences

## 4. Review and optimize the generated migration [done]
### Dependencies: 29.3
### Description: Carefully review the auto-generated migration file and make any necessary adjustments for optimal libSQL compatibility.
### Details:
Implementation steps:
1. Open the newly generated migration file
2. Review all create_table, create_index, and other schema operations
3. Check for and fix any SQLite-incompatible operations (like certain constraint types)
4. Optimize index definitions for libSQL performance characteristics
5. Add comments explaining any manual adjustments made
6. Ensure proper handling of TEXT vs VARCHAR types and other SQLite-specific type mappings
7. Verify foreign key constraints are properly defined

Testing approach:
- Manually review the SQL that would be generated using 'alembic upgrade --sql head'
- Verify the SQL is valid for libSQL/SQLite
- Check for any potential performance issues with the schema design

## 5. Test migration and update documentation [done]
### Dependencies: 29.3, 29.4
### Description: Apply the migration to a test database and update all documentation that references Alembic migrations.
### Details:
Implementation steps:
1. Create a fresh test libSQL/SQLite database
2. Apply the migration using 'alembic upgrade head'
3. Verify all tables, indices, and constraints were created correctly
4. Update any documentation that references specific migration versions
5. Update the database setup documentation to reflect the new migration approach
6. Add a note in the documentation about the migration history reset
7. Document the process for new installations vs. existing database migrations
8. Update the switching-db-to-libsql.md document to mark this task as completed

Testing approach:
- Test the complete database initialization process on a fresh environment
- Verify application functionality with the new database schema
- Run database-dependent tests to ensure compatibility
- Verify documentation accuracy by following it for a new setup

## 6. Adapt existing migrations to use the custom migration tool [pending]
### Dependencies: 29.5
### Description: Convert the existing migration files to work with the new custom migration tool developed in Task #33.
### Details:
Implementation steps:
1. Review the structure and format required by the new custom migration tool
2. Convert the initial migration created in subtask 3 to the format required by the custom tool
3. Ensure all schema definitions are correctly translated to the new format
4. Verify that all table definitions, indices, and constraints are preserved in the conversion
5. Update any references to Alembic-specific functions or methods

Testing approach:
- Verify the converted migration file is valid for the custom migration tool
- Compare the schema that would be generated by both approaches to ensure equivalence
- Check for any functionality that might be missing in the conversion

## 7. Update migration application and rollback procedures [pending]
### Dependencies: 29.6
### Description: Replace Alembic-specific migration commands with the equivalent commands from the custom migration tool.
### Details:
Implementation steps:
1. Document the commands to apply migrations using the custom migration tool
2. Document the commands to roll back migrations using the custom migration tool
3. Update any scripts or documentation that reference 'alembic upgrade' or 'alembic downgrade'
4. Create examples of common migration scenarios using the new tool
5. Update CI/CD pipelines to use the new migration commands

Testing approach:
- Test applying migrations to a fresh database
- Test rolling back migrations
- Verify the commands work in all environments (development, testing, production)
- Ensure the migration state is correctly tracked by the new tool

## 8. Update developer documentation for the new migration workflow [pending]
### Dependencies: 29.6, 29.7
### Description: Create comprehensive documentation for developers on how to use the custom migration tool for all database schema changes.
### Details:
Implementation steps:
1. Create a new documentation file explaining the custom migration tool workflow
2. Document how to create new migrations
3. Document how to apply and roll back migrations
4. Provide examples of common migration scenarios
5. Update any existing documentation that references Alembic
6. Create a migration guide for developers transitioning from Alembic
7. Document any differences in behavior or capabilities between Alembic and the custom tool

Testing approach:
- Have another developer follow the documentation to create and apply a test migration
- Verify all commands and examples work as described
- Ensure the documentation covers all common migration scenarios

## 9. Final testing with the custom migration tool [pending]
### Dependencies: 29.6, 29.7, 29.8
### Description: Perform comprehensive testing of the database schema using the custom migration tool.
### Details:
Implementation steps:
1. Create a fresh libSQL/SQLite database
2. Apply the initial migration using the custom migration tool
3. Verify all tables, indices, and constraints are created correctly
4. Test the application's functionality with the new database schema
5. Test the rollback functionality
6. Verify that the migration state is correctly tracked
7. Test creating and applying a new migration

Testing approach:
- Run a full suite of integration tests against the database
- Verify all CRUD operations work correctly
- Test complex queries and transactions
- Ensure the application functions correctly with the new schema
- Verify migration state tracking works correctly across multiple migrations

